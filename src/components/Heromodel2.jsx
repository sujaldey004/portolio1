/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 heromodel2.glb -T 
Files: heromodel2.glb [4.35MB] > /home/sam/portfolio/public/models/heromodel2-transformed.glb [1.79MB] (59%)
*/

import React from "react";
import { useRef, useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as Three from "three";
import { useGSAP } from "@gsap/react";
import { gsap } from "gsap";

export function Heromodel2(props) {
  const { scene } = useGLTF("/models/heromodel2-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const group = useRef();

  const mouse = useRef(new Three.Vector2());

  const [isIntroDone, setisIntroDone] = useState(false);

  useGSAP(() => {
    if (!isIntroDone) {
      gsap.fromTo(
        group.current.rotation,
        { y: Math.PI },
        {
          y: 0,
          delay: 0.5,
          duration: 1.5,
          ease: "expo.inOut",
          onComplete: () => {
            setisIntroDone(true);
          },
        }
      );
    }

    if (isIntroDone) {
      const handleMouseMove = (event) => {
        const { innerWidth, innerHeight } = window;

        mouse.current.x = (event.clientX / innerWidth) * 2 - 1;
        mouse.current.y = -(event.clientY / innerHeight) * 2 + 1;

        const target = new Three.Vector3(mouse.current.x, mouse.current.y, 1);
        group.current.getObjectByName("Head")?.lookAt(target);
        group.current.rotation.y = target.x * 0.5;
      };

      window.addEventListener("mousemove", handleMouseMove);

      return () => window.removeEventListener("mousemove", handleMouseMove);
    }
  }, [isIntroDone]);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Avatar"
        geometry={nodes.Wolf3D_Avatar.geometry}
        material={materials.Wolf3D_Avatar}
        skeleton={nodes.Wolf3D_Avatar.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/heromodel2-transformed.glb");
